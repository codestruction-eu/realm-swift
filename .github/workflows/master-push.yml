name: Prepare Release
on:
  push:
    branches:
      - "dp/test_release_2"
env:
  XCODE_VERSION: "['14.1', '14.2', '14.3.1', '15.0.1', '15.1']"
  PLATFORM: "['ios', 'iossimulator', 'osx', 'watchos', 'watchossimulator', 'tvos', 'tvossimulator', 'catalyst']"
  DOC_VERSION: '14.3.1'
jobs:
  prepare:
      runs-on: ubuntu-latest
      name: Prepare outputs
      outputs:
        XCODE_VERSIONS_MATRIX: ${{ env.XCODE_VERSION }}
        PLATFORM_MATRIX: ${{ env.PLATFORM }}
      steps:
        - name: Compute outputs
          run: |
            echo "XCODE_VERSIONS_MATRIX=${{ env.XCODE_VERSION }}" >> $GITHUB_OUTPUT
            echo "PLATFORM_MATRIX=${{ env.PLATFORM }}" >> $GITHUB_OUTPUT
  build-docs:
      runs-on: macos-13
      name: Package docs and upload them to the draft release
      needs: prepare
      steps:
        - uses: maxim-lobanov/setup-xcode@v1
          with:
            xcode-version: ${{ env.DOC_VERSION }}
        - name: Install Gems
          run: |
            gem install jazzy -v 0.14.4
        - name: Checkout
          uses: actions/checkout@v4
        - name: Package docs files 
          run: ./build.sh release_package-docs
        - name: Upload artifact to artifacts library
          uses: actions/upload-artifact@v3
          with:
            name: realm-docs.zip
            path: docs/realm-docs.zip
  build-examples:
      runs-on: macos-13
      name: Package examples and upload them to the draft release
      needs: prepare
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Run release_package-examples package and uploads the example folder
            run: ./build.sh release_package-examples
          - name: Upload artifact to artifacts library
            uses: actions/upload-artifact@v3
            with:
              name: realm-examples.zip
              path: realm-examples.zip
  build-product:
      runs-on: ubuntu-latest
      name: Package product for platform ${{ matrix.platform }}, target ${{ matrix.target }}, xcode version ${{ matrix.xcode-version }} and configuration ${{ matrix.configuration }}.
      needs: prepare
      strategy:
        matrix:
          platform: ${{ fromJSON(needs.prepare.outputs.PLATFORM_MATRIX) }}
          target: [realm, realmswift]
          xcode-version: ${{ fromJSON(needs.prepare.outputs.XCODE_VERSIONS_MATRIX) }}
          configuration: [release]
          include: 
            - platform: ios
              target: realm
              xcode-version: 14.1
              configuration: static
            - platform: ios
              target: realm
              xcode-version: 14.2
              configuration: static
            - platform: ios
              target: realm
              xcode-version: 14.3.1
              configuration: static
            - platform: ios
              target: realm
              xcode-version: 15.0.1
              configuration: static
            - platform: ios
              target: realm
              xcode-version: 15.1
              configuration: static
            - platform: visionos
              target: realm
              xcode-version: 15.1
              configuration: release
            - platform: visionos
              target: realmswift
              xcode-version: 15.1
              configuration: release
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Get Token
            id: token
            uses: yuki0n0/action-appstoreconnect-token@v1.0
            with:
              # UUID. Can get from App Store Connect.
              issuer id: ${{ secrets.APPLE_STORE_CONNECT_ISSUER_ID }}
              # Key ID. Can get from App Store Connect.
              key id: ${{ secrets.APPLE_STORE_CONNECT_KEY_ID }}
              # P8 private key. Can get from App Store Connect.
              key:  ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
          - name: Creates on demand XCode Cloud's workflows with a build action for ${{ matrix.platform }} in ${{ matrix.xcode-version }} with configuration ${{ matrix.configuration }}
            id: create-workflow
            run: |
              workflow_id=$(echo $(ruby ./scripts/xcode_cloud_helper.rb --create-build-workflow "${{ matrix.platform }}-${{ matrix.target }}-${{ matrix.configuration }}" --token ${{ steps.token.outputs.token }} --xcode-version ${{ matrix.xcode-version }}))
              echo "WORKFLOW_ID=$workflow_id" >> $GITHUB_OUTPUT
          - name: Runs the XCode Cloud workflow created by the prevous step which that a package for ${{ matrix.platform }} in ${{ matrix.xcode-version }} with configuration ${{ matrix.configuration }}
            id: build_run
            run: |
              build_run_id=$(echo $(ruby ./scripts/xcode_cloud_helper.rb --run-release-workflow ${{ steps.create-workflow.outputs.WORKFLOW_ID }} --token ${{ steps.token.outputs.token }} --branch ${{ github.ref_name }}))
              echo "BUILD_RUN_ID=$build_run_id" >> $GITHUB_OUTPUT
          - name: Check build status and wait for it to finish
            run: |
              ruby ./scripts/xcode_cloud_helper.rb --token ${{ steps.token.outputs.token }} --check-workflow-status ${{ steps.build_run.outputs.BUILD_RUN_ID }}
          - name: Download package from XCode Cloud artifacts ${{ matrix.platform }} in ${{ matrix.xcode-version }} with configuration ${{ matrix.configuration }}
            run: ruby ./scripts/xcode_cloud_helper.rb --download-build-artifact ${{ steps.build_run.outputs.BUILD_RUN_ID }} --token ${{ steps.token.outputs.token }}
          - name: Upload artifact to artifacts library
            uses: actions/upload-artifact@v3
            with:
              name: package-${{ matrix.platform }}-${{ matrix.xcode-version }}-${{ matrix.target }}-${{ matrix.configuration }}.zip
              path: product.zip
  build-package:
      runs-on: macos-latest
      name: Package products for all xcode version into a single package.
      needs: build-product
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Export GITHUB_TOKEN to workspace
            run: echo "GITHUB_ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          - name: 
            run: ./build.sh release-package-all
  test-package-examples:
      runs-on: ubuntu-latest
      name: Test examples
      needs: build-package
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Get Token
            id: token
            uses: yuki0n0/action-appstoreconnect-token@v1.0
            with:
                # UUID. Can get from App Store Connect.
                issuer id: ${{ secrets.APPLE_STORE_CONNECT_ISSUER_ID }}
                # Key ID. Can get from App Store Connect.
                key id: ${{ secrets.APPLE_STORE_CONNECT_KEY_ID }}
                # P8 private key. Can get from App Store Connect.
                key:  ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
          - name: Run release_test-package-examples_15.1 which runs test over the packages produces by the previous step and wait for it to complete or fail
            run: ruby ./scripts/xcode_cloud_helper.rb --run-release-workflow release_test-package-examples_15.1 --token ${{ steps.token.outputs.token }}
  test-ios-static:
      runs-on: ubuntu-latest
      name: Run tests on iOS with configuration Static
      needs: build-package
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Get Token
            id: token
            uses: yuki0n0/action-appstoreconnect-token@v1.0
            with:
                # UUID. Can get from App Store Connect.
                issuer id: ${{ secrets.APPLE_STORE_CONNECT_ISSUER_ID }}
                # Key ID. Can get from App Store Connect.
                key id: ${{ secrets.APPLE_STORE_CONNECT_KEY_ID }}
                # P8 private key. Can get from App Store Connect.
                key:  ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
          - name: Run release_ios-static_15.1 which runs test over the packages produces by the previous step and wait for it to complete or fail
            run: ruby ./scripts/xcode_cloud_helper.rb --run-release-workflow release_test-ios-static_15.1 --token ${{ steps.token.outputs.token }}
  test-osx-static:
      runs-on: ubuntu-latest
      name: Run tests on macOS
      needs: build-package
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Get Token
            id: token
            uses: yuki0n0/action-appstoreconnect-token@v1.0
            with:
                # UUID. Can get from App Store Connect.
                issuer id: ${{ secrets.APPLE_STORE_CONNECT_ISSUER_ID }}
                # Key ID. Can get from App Store Connect.
                key id: ${{ secrets.APPLE_STORE_CONNECT_KEY_ID }}
                # P8 private key. Can get from App Store Connect.
                key:  ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
          - name: Run release_osx_15.1 which runs test over the packages produces by the previous step and wait for it to complete or fail
            run: ruby ./scripts/xcode_cloud_helper.rb --run-release-workflow release_test-osx_15.1 --token ${{ steps.token.outputs.token }}
  test-installation:
      runs-on: ubuntu-latest
      name: Run installation test for ${{ matrix.platform }}, ${{ matrix.installation }} and ${{ matrix.linkage }}
      needs: build-package
      env:
        XCODE_VERSION: '14.3.1'
      strategy:
        matrix:
          platform: [ios, osx, watchos, tvos, catalyst]
          installation: [cocoapods, spm, carthage]
          linkage: [static, dynamic]
          exclude:
            - platform: catalyst
              installation: carthage
            - installation: carthage
              linkage: static
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Get Token
          id: token
          uses: yuki0n0/action-appstoreconnect-token@v1.0
          with:
            # UUID. Can get from App Store Connect.
            issuer id: ${{ secrets.APPLE_STORE_CONNECT_ISSUER_ID }}
            # Key ID. Can get from App Store Connect.
            key id: ${{ secrets.APPLE_STORE_CONNECT_KEY_ID }}
            # P8 private key. Can get from App Store Connect.
            key:  ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
        - name: Creates an XCode Cloud workflow to run the test and runs build
          run: |
            ruby ./scripts/xcode_cloud_helper.rb --create-release-workflow-and-run test-installation-${{ matrix.platform }}-${{ matrix.installation }}-${{ matrix.linkage }} --xcode-version "$XCODE_VERSION" --token ${{ steps.token.outputs.token }} --team-id ${{ secrets.APPLE_STORE_CONNECT_TEAM_ID }}
  test-installation-xcode: # we run this installation tests separatly because we need xcode cloud workflows previsously created with a GITHUB token so we can download the release package for this tests
      runs-on: ubuntu-latest
      name: Run installation xcframework ${{ matrix.platform }}, ${{ matrix.linkage }} in ${{ matrix.xcode_version }} 
      needs: build-package
      strategy:
        max-parallel: 5
        matrix:
          platform: [osx]
          xcode_version: ['14.1', '14.2', '14.3.1', '15.0.1', '15.1']
          linkage: [dynamic]
          include:
            - platform: ios
              xcode_version: '14.3.1'
              linkage: dynamic
            - platform: watchos
              xcode_version: '14.3.1'
              linkage: dynamic
            - platform: tvos
              xcode_version: '14.3.1'
              linkage: dynamic
            - platform: catalyst
              xcode_version: '14.3.1'
              linkage: dynamic
            - platform: ios
              installation: '14.3.1'
              linkage: static
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Get Token
          id: token
          uses: yuki0n0/action-appstoreconnect-token@v1.0
          with:
              # UUID. Can get from App Store Connect.
              issuer id: ${{ secrets.APPLE_STORE_CONNECT_ISSUER_ID }}
              # Key ID. Can get from App Store Connect.
              key id: ${{ secrets.APPLE_STORE_CONNECT_KEY_ID }}
              # P8 private key. Can get from App Store Connect.
              key:  ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
        - name: Run installation tests for ${{ matrix.platform }} xcframework ${{ matrix.linkage }} in xcode version ${{ matrix.xcode-version }}
          run: |
            ruby ./scripts/xcode_cloud_helper.rb --run-release-workflow "release_test-installation-${{ matrix.platform }}-xcframework-${{ matrix.linkage }}_${{ matrix.xcode-version }}" --token ${{ steps.token.outputs.token }}